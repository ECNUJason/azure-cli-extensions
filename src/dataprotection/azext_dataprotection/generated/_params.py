# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=line-too-long
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from azure.cli.core.commands.parameters import (
    tags_type,
    get_enum_type,
    resource_group_name_type,
    get_location_type
)
from azure.cli.core.commands.validators import get_default_location_from_resource_group
from azext_dataprotection.action import (
    AddStorageSettings,
    AddFeatureValidationRequest,
    AddDataSourceInfo,
    AddDataSourceSetInfo,
    AddPolicyParameters,
    AddItemLevelRestoreTargetInfoRestoreCriteria,
    AddRestoreFilesTargetInfoTargetDetails
)


def load_arguments(self, _):

    with self.argument_context('dataprotection backup-vault show') as c:
        c.argument('vault_name', type=str, help='The name of the backup vault. Swagger name=vaultName',
                   id_part='name')
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('dataprotection backup-vault create') as c:
        c.argument('vault_name', type=str, help='The name of the backup vault. Swagger name=vaultName')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('e_tag', type=str, help='Optional ETag. Swagger name=eTag')
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('type_', options_list=['--type'], type=str, help='The identityType which can be either '
                   'SystemAssigned or None. Swagger name=type', arg_group='Identity')
        c.argument('storage_settings', action=AddStorageSettings, nargs='+', help='Storage Settings. Swagger '
                   'name=storageSettings')

    with self.argument_context('dataprotection backup-vault update') as c:
        c.argument('vault_name', type=str, help='The name of the backup vault. Swagger name=vaultName',
                   id_part='name')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('e_tag', type=str, help='Optional ETag. Swagger name=eTag')
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('type_', options_list=['--type'], type=str, help='The identityType which can be either '
                   'SystemAssigned or None. Swagger name=type', arg_group='Identity')
        c.argument('storage_settings', action=AddStorageSettings, nargs='+', help='Storage Settings. Swagger '
                   'name=storageSettings')
        c.ignore('parameters')

    with self.argument_context('dataprotection backup-vault delete') as c:
        c.argument('vault_name', type=str, help='The name of the backup vault. Swagger name=vaultName',
                   id_part='name')
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('dataprotection backup-vault patch') as c:
        c.argument('vault_name', type=str, help='The name of the backup vault. Swagger name=vaultName',
                   id_part='name')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('tags', tags_type)
        c.argument('type_', options_list=['--type'], type=str, help='The identityType which can be either '
                   'SystemAssigned or None. Swagger name=type', arg_group='Identity')

    with self.argument_context('dataprotection backup-vault show-resource-in-resource-group') as c:
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('dataprotection backup-vault wait') as c:
        c.argument('vault_name', type=str, help='The name of the backup vault. Swagger name=vaultName',
                   id_part='name')
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('dataprotection check-feature-support') as c:
        c.argument('location', arg_type=get_location_type(self.cli_ctx), id_part='name')
        c.argument('feature_validation_request', action=AddFeatureValidationRequest, nargs='+', help='Base class for '
                   'feature object. Swagger name=FeatureValidationRequest', arg_group='Parameters')

    with self.argument_context('dataprotection show-operation-result-patch') as c:
        c.argument('vault_name', type=str, help='The name of the backup vault. Swagger name=vaultName',
                   id_part='name')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('operation_id', type=str, help='. Swagger name=operationId', id_part='child_name_1')

    with self.argument_context('dataprotection show-operation-status') as c:
        c.argument('location', arg_type=get_location_type(self.cli_ctx), id_part='name')
        c.argument('operation_id', type=str, help='. Swagger name=operationId', id_part='child_name_1')

    with self.argument_context('dataprotection backup-policy list') as c:
        c.argument('vault_name', type=str, help='The name of the backup vault. Swagger name=vaultName')
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('dataprotection backup-policy show') as c:
        c.argument('vault_name', type=str, help='The name of the backup vault. Swagger name=vaultName',
                   id_part='name')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('backup_policy_name', options_list=['--name', '-n', '--backup-policy-name'], type=str, help='. '
                   'Swagger name=backupPolicyName', id_part='child_name_1')

    with self.argument_context('dataprotection backup-policy create') as c:
        c.argument('vault_name', type=str, help='The name of the backup vault. Swagger name=vaultName')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('backup_policy_name', options_list=['--name', '-n', '--backup-policy-name'], type=str, help='. '
                   'Swagger name=backupPolicyName')
        c.argument('datasource_types', nargs='+', help='Type of datasource for the backup management. Swagger '
                   'name=datasourceTypes')

    with self.argument_context('dataprotection backup-policy update') as c:
        c.argument('vault_name', type=str, help='The name of the backup vault. Swagger name=vaultName',
                   id_part='name')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('backup_policy_name', options_list=['--name', '-n', '--backup-policy-name'], type=str, help='. '
                   'Swagger name=backupPolicyName', id_part='child_name_1')
        c.argument('datasource_types', nargs='+', help='Type of datasource for the backup management. Swagger '
                   'name=datasourceTypes')
        c.ignore('parameters')

    with self.argument_context('dataprotection backup-policy delete') as c:
        c.argument('vault_name', type=str, help='The name of the backup vault. Swagger name=vaultName',
                   id_part='name')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('backup_policy_name', options_list=['--name', '-n', '--backup-policy-name'], type=str, help='. '
                   'Swagger name=backupPolicyName', id_part='child_name_1')

    with self.argument_context('dataprotection backup-instance list') as c:
        c.argument('vault_name', type=str, help='The name of the backup vault. Swagger name=vaultName')
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('dataprotection backup-instance show') as c:
        c.argument('vault_name', type=str, help='The name of the backup vault. Swagger name=vaultName',
                   id_part='name')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('backup_instance_name', options_list=['--name', '-n', '--backup-instance-name'], type=str,
                   help='The name of the backup instance. Swagger name=backupInstanceName', id_part='child_name_1')

    with self.argument_context('dataprotection backup-instance create') as c:
        c.argument('vault_name', type=str, help='The name of the backup vault. Swagger name=vaultName')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('backup_instance_name', options_list=['--name', '-n', '--backup-instance-name'], type=str,
                   help='The name of the backup instance. Swagger name=backupInstanceName')
        c.argument('friendly_name', type=str, help='Gets or sets the Backup Instance friendly name. Swagger '
                   'name=friendlyName')
        c.argument('data_source_info', action=AddDataSourceInfo, nargs='+', help='Gets or sets the data source '
                   'information. Swagger name=dataSourceInfo')
        c.argument('data_source_set_info', action=AddDataSourceSetInfo, nargs='+', help='Gets or sets the data source '
                   'set information. Swagger name=dataSourceSetInfo')
        c.argument('object_type', type=str, help='. Swagger name=objectType')
        c.argument('policy_id', type=str, help='. Swagger name=policyId', arg_group='Policy Info')
        c.argument('policy_parameters', action=AddPolicyParameters, nargs='+', help='Policy parameters for the backup '
                   'instance. Swagger name=policyParameters', arg_group='Policy Info')

    with self.argument_context('dataprotection backup-instance update') as c:
        c.argument('vault_name', type=str, help='The name of the backup vault. Swagger name=vaultName',
                   id_part='name')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('backup_instance_name', options_list=['--name', '-n', '--backup-instance-name'], type=str,
                   help='The name of the backup instance. Swagger name=backupInstanceName', id_part='child_name_1')
        c.argument('friendly_name', type=str, help='Gets or sets the Backup Instance friendly name. Swagger '
                   'name=friendlyName')
        c.argument('data_source_info', action=AddDataSourceInfo, nargs='+', help='Gets or sets the data source '
                   'information. Swagger name=dataSourceInfo')
        c.argument('data_source_set_info', action=AddDataSourceSetInfo, nargs='+', help='Gets or sets the data source '
                   'set information. Swagger name=dataSourceSetInfo')
        c.argument('object_type', type=str, help='. Swagger name=objectType')
        c.argument('policy_id', type=str, help='. Swagger name=policyId', arg_group='Policy Info')
        c.argument('policy_parameters', action=AddPolicyParameters, nargs='+', help='Policy parameters for the backup '
                   'instance. Swagger name=policyParameters', arg_group='Policy Info')
        c.ignore('parameters')

    with self.argument_context('dataprotection backup-instance delete') as c:
        c.argument('vault_name', type=str, help='The name of the backup vault. Swagger name=vaultName',
                   id_part='name')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('backup_instance_name', options_list=['--name', '-n', '--backup-instance-name'], type=str,
                   help='The name of the backup instance. Swagger name=backupInstanceName', id_part='child_name_1')

    with self.argument_context('dataprotection backup-instance adhoc-backup') as c:
        c.argument('vault_name', type=str, help='The name of the backup vault. Swagger name=vaultName',
                   id_part='name')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('backup_instance_name', options_list=['--name', '-n', '--backup-instance-name'], type=str,
                   help='The name of the backup instance. Swagger name=backupInstanceName', id_part='child_name_1')
        c.argument('rule_name', type=str, help='. Swagger name=ruleName', arg_group='Backup Rule Options')
        c.argument('retention_tag_override', type=str, help='. Swagger name=retentionTagOverride', arg_group='Backup '
                   'Rule Options Trigger Option')

    with self.argument_context('dataprotection backup-instance azure-backup-recovery-point-based-restore-request item-level-restore-target-info trigger-restore') as c:
        c.argument('vault_name', type=str, help='The name of the backup vault. Swagger name=vaultName',
                   id_part='name')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('backup_instance_name', options_list=['--name', '-n', '--backup-instance-name'], type=str,
                   help='The name of the backup instance. Swagger name=backupInstanceName', id_part='child_name_1')
        c.argument('item_level_restore_target_info_restore_location', type=str, help='Target Restore region. Swagger '
                   'name=restoreLocation')
        c.argument('item_level_restore_target_info_restore_criteria',
                   action=AddItemLevelRestoreTargetInfoRestoreCriteria, nargs='+', help='Restore Criteria. Swagger '
                   'name=restoreCriteria')
        c.argument('item_level_restore_target_info_datasource_info', action=AddDataSourceInfo, nargs='+',
                   help='Information of target DS. Swagger name=datasourceInfo')
        c.argument('item_level_restore_target_info_datasource_set_info', action=AddDataSourceSetInfo, nargs='+',
                   help='Information of target DS Set. Swagger name=datasourceSetInfo')
        c.argument('source_data_store_type', arg_type=get_enum_type(['ArchiveStore', 'SnapshotStore', 'VaultStore']),
                   help='Gets or sets the type of the source data store. Swagger name=sourceDataStoreType')
        c.argument('recovery_point_id', type=str, help='. Swagger name=recoveryPointId')

    with self.argument_context('dataprotection backup-instance azure-backup-recovery-point-based-restore-request restore-files-target-info trigger-restore') as c:
        c.argument('vault_name', type=str, help='The name of the backup vault. Swagger name=vaultName',
                   id_part='name')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('backup_instance_name', options_list=['--name', '-n', '--backup-instance-name'], type=str,
                   help='The name of the backup instance. Swagger name=backupInstanceName', id_part='child_name_1')
        c.argument('restore_files_target_info_restore_location', type=str, help='Target Restore region. Swagger '
                   'name=restoreLocation')
        c.argument('restore_files_target_info_target_details', action=AddRestoreFilesTargetInfoTargetDetails,
                   nargs='+', help='Destination of RestoreAsFiles operation, when destination is not a datasource. '
                   'Swagger name=targetDetails')
        c.argument('source_data_store_type', arg_type=get_enum_type(['ArchiveStore', 'SnapshotStore', 'VaultStore']),
                   help='Gets or sets the type of the source data store. Swagger name=sourceDataStoreType')
        c.argument('recovery_point_id', type=str, help='. Swagger name=recoveryPointId')

    with self.argument_context('dataprotection backup-instance azure-backup-recovery-point-based-restore-request restore-target-info trigger-restore') as c:
        c.argument('vault_name', type=str, help='The name of the backup vault. Swagger name=vaultName',
                   id_part='name')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('backup_instance_name', options_list=['--name', '-n', '--backup-instance-name'], type=str,
                   help='The name of the backup instance. Swagger name=backupInstanceName', id_part='child_name_1')
        c.argument('restore_target_info_restore_location', type=str, help='Target Restore region. Swagger '
                   'name=restoreLocation')
        c.argument('restore_target_info_datasource_info', action=AddDataSourceInfo, nargs='+', help='Information of '
                   'target DS. Swagger name=datasourceInfo')
        c.argument('restore_target_info_datasource_set_info', action=AddDataSourceSetInfo, nargs='+',
                   help='Information of target DS Set. Swagger name=datasourceSetInfo')
        c.argument('source_data_store_type', arg_type=get_enum_type(['ArchiveStore', 'SnapshotStore', 'VaultStore']),
                   help='Gets or sets the type of the source data store. Swagger name=sourceDataStoreType')
        c.argument('recovery_point_id', type=str, help='. Swagger name=recoveryPointId')

    with self.argument_context('dataprotection backup-instance azure-backup-recovery-time-based-restore-request item-level-restore-target-info trigger-restore') as c:
        c.argument('vault_name', type=str, help='The name of the backup vault. Swagger name=vaultName',
                   id_part='name')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('backup_instance_name', options_list=['--name', '-n', '--backup-instance-name'], type=str,
                   help='The name of the backup instance. Swagger name=backupInstanceName', id_part='child_name_1')
        c.argument('item_level_restore_target_info_restore_location', type=str, help='Target Restore region. Swagger '
                   'name=restoreLocation')
        c.argument('item_level_restore_target_info_restore_criteria',
                   action=AddItemLevelRestoreTargetInfoRestoreCriteria, nargs='+', help='Restore Criteria. Swagger '
                   'name=restoreCriteria')
        c.argument('item_level_restore_target_info_datasource_info', action=AddDataSourceInfo, nargs='+',
                   help='Information of target DS. Swagger name=datasourceInfo')
        c.argument('item_level_restore_target_info_datasource_set_info', action=AddDataSourceSetInfo, nargs='+',
                   help='Information of target DS Set. Swagger name=datasourceSetInfo')
        c.argument('source_data_store_type', arg_type=get_enum_type(['ArchiveStore', 'SnapshotStore', 'VaultStore']),
                   help='Gets or sets the type of the source data store. Swagger name=sourceDataStoreType')
        c.argument('recovery_point_time', type=str, help='The recovery time in ISO 8601 format example - '
                   '2020-08-14T17:30:00.0000000Z. Swagger name=recoveryPointTime')

    with self.argument_context('dataprotection backup-instance azure-backup-recovery-time-based-restore-request restore-files-target-info trigger-restore') as c:
        c.argument('vault_name', type=str, help='The name of the backup vault. Swagger name=vaultName',
                   id_part='name')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('backup_instance_name', options_list=['--name', '-n', '--backup-instance-name'], type=str,
                   help='The name of the backup instance. Swagger name=backupInstanceName', id_part='child_name_1')
        c.argument('restore_files_target_info_restore_location', type=str, help='Target Restore region. Swagger '
                   'name=restoreLocation')
        c.argument('restore_files_target_info_target_details', action=AddRestoreFilesTargetInfoTargetDetails,
                   nargs='+', help='Destination of RestoreAsFiles operation, when destination is not a datasource. '
                   'Swagger name=targetDetails')
        c.argument('source_data_store_type', arg_type=get_enum_type(['ArchiveStore', 'SnapshotStore', 'VaultStore']),
                   help='Gets or sets the type of the source data store. Swagger name=sourceDataStoreType')
        c.argument('recovery_point_time', type=str, help='The recovery time in ISO 8601 format example - '
                   '2020-08-14T17:30:00.0000000Z. Swagger name=recoveryPointTime')

    with self.argument_context('dataprotection backup-instance azure-backup-recovery-time-based-restore-request restore-target-info trigger-restore') as c:
        c.argument('vault_name', type=str, help='The name of the backup vault. Swagger name=vaultName',
                   id_part='name')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('backup_instance_name', options_list=['--name', '-n', '--backup-instance-name'], type=str,
                   help='The name of the backup instance. Swagger name=backupInstanceName', id_part='child_name_1')
        c.argument('restore_target_info_restore_location', type=str, help='Target Restore region. Swagger '
                   'name=restoreLocation')
        c.argument('restore_target_info_datasource_info', action=AddDataSourceInfo, nargs='+', help='Information of '
                   'target DS. Swagger name=datasourceInfo')
        c.argument('restore_target_info_datasource_set_info', action=AddDataSourceSetInfo, nargs='+',
                   help='Information of target DS Set. Swagger name=datasourceSetInfo')
        c.argument('source_data_store_type', arg_type=get_enum_type(['ArchiveStore', 'SnapshotStore', 'VaultStore']),
                   help='Gets or sets the type of the source data store. Swagger name=sourceDataStoreType')
        c.argument('recovery_point_time', type=str, help='The recovery time in ISO 8601 format example - '
                   '2020-08-14T17:30:00.0000000Z. Swagger name=recoveryPointTime')

    with self.argument_context('dataprotection backup-instance azure-backup-restore-with-rehydration-request item-level-restore-target-info trigger-restore') as c:
        c.argument('vault_name', type=str, help='The name of the backup vault. Swagger name=vaultName',
                   id_part='name')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('backup_instance_name', options_list=['--name', '-n', '--backup-instance-name'], type=str,
                   help='The name of the backup instance. Swagger name=backupInstanceName', id_part='child_name_1')
        c.argument('item_level_restore_target_info_restore_location', type=str, help='Target Restore region. Swagger '
                   'name=restoreLocation')
        c.argument('item_level_restore_target_info_restore_criteria',
                   action=AddItemLevelRestoreTargetInfoRestoreCriteria, nargs='+', help='Restore Criteria. Swagger '
                   'name=restoreCriteria')
        c.argument('item_level_restore_target_info_datasource_info', action=AddDataSourceInfo, nargs='+',
                   help='Information of target DS. Swagger name=datasourceInfo')
        c.argument('item_level_restore_target_info_datasource_set_info', action=AddDataSourceSetInfo, nargs='+',
                   help='Information of target DS Set. Swagger name=datasourceSetInfo')
        c.argument('source_data_store_type', arg_type=get_enum_type(['ArchiveStore', 'SnapshotStore', 'VaultStore']),
                   help='Gets or sets the type of the source data store. Swagger name=sourceDataStoreType')
        c.argument('recovery_point_id', type=str, help='. Swagger name=recoveryPointId')
        c.argument('rehydration_priority', arg_type=get_enum_type(['Invalid', 'High', 'Standard']), help='Priority to '
                   'be used for rehydration. Values High or Standard. Swagger name=rehydrationPriority')
        c.argument('rehydration_retention_duration', type=str, help='Retention duration in ISO 8601 format i.e P10D . '
                   'Swagger name=rehydrationRetentionDuration')

    with self.argument_context('dataprotection backup-instance azure-backup-restore-with-rehydration-request restore-files-target-info trigger-restore') as c:
        c.argument('vault_name', type=str, help='The name of the backup vault. Swagger name=vaultName',
                   id_part='name')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('backup_instance_name', options_list=['--name', '-n', '--backup-instance-name'], type=str,
                   help='The name of the backup instance. Swagger name=backupInstanceName', id_part='child_name_1')
        c.argument('restore_files_target_info_restore_location', type=str, help='Target Restore region. Swagger '
                   'name=restoreLocation')
        c.argument('restore_files_target_info_target_details', action=AddRestoreFilesTargetInfoTargetDetails,
                   nargs='+', help='Destination of RestoreAsFiles operation, when destination is not a datasource. '
                   'Swagger name=targetDetails')
        c.argument('source_data_store_type', arg_type=get_enum_type(['ArchiveStore', 'SnapshotStore', 'VaultStore']),
                   help='Gets or sets the type of the source data store. Swagger name=sourceDataStoreType')
        c.argument('recovery_point_id', type=str, help='. Swagger name=recoveryPointId')
        c.argument('rehydration_priority', arg_type=get_enum_type(['Invalid', 'High', 'Standard']), help='Priority to '
                   'be used for rehydration. Values High or Standard. Swagger name=rehydrationPriority')
        c.argument('rehydration_retention_duration', type=str, help='Retention duration in ISO 8601 format i.e P10D . '
                   'Swagger name=rehydrationRetentionDuration')

    with self.argument_context('dataprotection backup-instance azure-backup-restore-with-rehydration-request restore-target-info trigger-restore') as c:
        c.argument('vault_name', type=str, help='The name of the backup vault. Swagger name=vaultName',
                   id_part='name')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('backup_instance_name', options_list=['--name', '-n', '--backup-instance-name'], type=str,
                   help='The name of the backup instance. Swagger name=backupInstanceName', id_part='child_name_1')
        c.argument('restore_target_info_restore_location', type=str, help='Target Restore region. Swagger '
                   'name=restoreLocation')
        c.argument('restore_target_info_datasource_info', action=AddDataSourceInfo, nargs='+', help='Information of '
                   'target DS. Swagger name=datasourceInfo')
        c.argument('restore_target_info_datasource_set_info', action=AddDataSourceSetInfo, nargs='+',
                   help='Information of target DS Set. Swagger name=datasourceSetInfo')
        c.argument('source_data_store_type', arg_type=get_enum_type(['ArchiveStore', 'SnapshotStore', 'VaultStore']),
                   help='Gets or sets the type of the source data store. Swagger name=sourceDataStoreType')
        c.argument('recovery_point_id', type=str, help='. Swagger name=recoveryPointId')
        c.argument('rehydration_priority', arg_type=get_enum_type(['Invalid', 'High', 'Standard']), help='Priority to '
                   'be used for rehydration. Values High or Standard. Swagger name=rehydrationPriority')
        c.argument('rehydration_retention_duration', type=str, help='Retention duration in ISO 8601 format i.e P10D . '
                   'Swagger name=rehydrationRetentionDuration')

    with self.argument_context('dataprotection backup-instance trigger-rehydrate') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('vault_name', type=str, help='The name of the backup vault. Swagger name=vaultName',
                   id_part='name')
        c.argument('backup_instance_name', options_list=['--name', '-n', '--backup-instance-name'], type=str, help='. '
                   'Swagger name=backupInstanceName', id_part='child_name_1')
        c.argument('recovery_point_id', type=str, help='Id of the recovery point to be recovered. Swagger '
                   'name=recoveryPointId')
        c.argument('rehydration_priority', arg_type=get_enum_type(['Invalid', 'High', 'Standard']), help='Priority to '
                   'be used for rehydration. Values High or Standard. Swagger name=rehydrationPriority')
        c.argument('rehydration_retention_duration', type=str, help='Retention duration in ISO 8601 format i.e P10D . '
                   'Swagger name=rehydrationRetentionDuration')

    with self.argument_context('dataprotection backup-instance wait') as c:
        c.argument('vault_name', type=str, help='The name of the backup vault. Swagger name=vaultName',
                   id_part='name')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('backup_instance_name', options_list=['--name', '-n', '--backup-instance-name'], type=str,
                   help='The name of the backup instance. Swagger name=backupInstanceName', id_part='child_name_1')

    with self.argument_context('dataprotection recovery-point show-list') as c:
        c.argument('vault_name', type=str, help='The name of the backup vault. Swagger name=vaultName',
                   id_part='name')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('backup_instance_name', type=str, help='The name of the backup instance. Swagger '
                   'name=backupInstanceName', id_part='child_name_1')
        c.argument('filter_', options_list=['--filter'], type=str, help='OData filter options. Swagger name=$filter')
        c.argument('skip_token', type=str, help='skipToken Filter. Swagger name=$skipToken')

    with self.argument_context('dataprotection recovery-point show') as c:
        c.argument('vault_name', type=str, help='The name of the backup vault. Swagger name=vaultName',
                   id_part='name')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('backup_instance_name', type=str, help='The name of the backup instance. Swagger '
                   'name=backupInstanceName', id_part='child_name_1')
        c.argument('recovery_point_id', type=str, help='. Swagger name=recoveryPointId', id_part='child_name_2')

    with self.argument_context('dataprotection job list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('vault_name', type=str, help='The name of the backup vault. Swagger name=vaultName')

    with self.argument_context('dataprotection job show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('vault_name', type=str, help='The name of the backup vault. Swagger name=vaultName',
                   id_part='name')
        c.argument('job_id', type=str, help='The Job ID. This is a GUID-formatted string (e.g. '
                   '00000000-0000-0000-0000-000000000000). Swagger name=jobId', id_part='child_name_1')
