# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=line-too-long
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from azure.cli.core.commands.parameters import (
    tags_type,
    get_enum_type,
    resource_group_name_type,
    get_location_type
)
from azure.cli.core.commands.validators import get_default_location_from_resource_group
from azext_dataprotection.action import (
    AddStorageSettings,
    AddFeatureValidationRequest,
    AddDataSourceInfo,
    AddDataSourceSetInfo,
    AddPolicyParameters,
    AddItemLevelRestoreTargetInfoRestoreCriteria,
    AddRestoreFilesTargetInfoTargetDetails
)


def load_arguments(self, _):

    with self.argument_context('dataprotection backup-vault show') as c:
        c.argument('vault_name', type=str, help='The name of the backup vault.', id_part='name')
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('dataprotection backup-vault create') as c:
        c.argument('vault_name', type=str, help='The name of the backup vault.')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('e_tag', type=str, help='Optional ETag.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('type_', options_list=['--type'], type=str, help='The identityType which can be either '
                   'SystemAssigned or None', arg_group='Identity')
        c.argument('storage_settings', action=AddStorageSettings, nargs='+', help='Storage Settings')

    with self.argument_context('dataprotection backup-vault update') as c:
        c.argument('vault_name', type=str, help='The name of the backup vault.', id_part='name')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('e_tag', type=str, help='Optional ETag.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('type_', options_list=['--type'], type=str, help='The identityType which can be either '
                   'SystemAssigned or None', arg_group='Identity')
        c.argument('storage_settings', action=AddStorageSettings, nargs='+', help='Storage Settings')
        c.ignore('parameters')

    with self.argument_context('dataprotection backup-vault delete') as c:
        c.argument('vault_name', type=str, help='The name of the backup vault.', id_part='name')
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('dataprotection backup-vault patch') as c:
        c.argument('vault_name', type=str, help='The name of the backup vault.', id_part='name')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('tags', tags_type)
        c.argument('type_', options_list=['--type'], type=str, help='The identityType which can be either '
                   'SystemAssigned or None', arg_group='Identity')

    with self.argument_context('dataprotection backup-vault show-resource-in-resource-group') as c:
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('dataprotection backup-vault wait') as c:
        c.argument('vault_name', type=str, help='The name of the backup vault.', id_part='name')
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('dataprotection check-feature-support') as c:
        c.argument('location', arg_type=get_location_type(self.cli_ctx), id_part='name')
        c.argument('feature_validation_request', action=AddFeatureValidationRequest, nargs='+', help='Base class for '
                   'feature object', arg_group='Parameters')

    with self.argument_context('dataprotection show-operation-result-patch') as c:
        c.argument('vault_name', type=str, help='The name of the backup vault.', id_part='name')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('operation_id', type=str, help='', id_part='child_name_1')

    with self.argument_context('dataprotection show-operation-status') as c:
        c.argument('location', arg_type=get_location_type(self.cli_ctx), id_part='name')
        c.argument('operation_id', type=str, help='', id_part='child_name_1')

    with self.argument_context('dataprotection backup-policy list') as c:
        c.argument('vault_name', type=str, help='The name of the backup vault.')
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('dataprotection backup-policy show') as c:
        c.argument('vault_name', type=str, help='The name of the backup vault.', id_part='name')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('backup_policy_name', options_list=['--name', '-n', '--backup-policy-name'], type=str, help='',
                   id_part='child_name_1')

    with self.argument_context('dataprotection backup-policy create') as c:
        c.argument('vault_name', type=str, help='The name of the backup vault.')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('backup_policy_name', options_list=['--name', '-n', '--backup-policy-name'], type=str, help='')
        c.argument('datasource_types', nargs='+', help='Type of datasource for the backup management')

    with self.argument_context('dataprotection backup-policy update') as c:
        c.argument('vault_name', type=str, help='The name of the backup vault.', id_part='name')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('backup_policy_name', options_list=['--name', '-n', '--backup-policy-name'], type=str, help='',
                   id_part='child_name_1')
        c.argument('datasource_types', nargs='+', help='Type of datasource for the backup management')
        c.ignore('parameters')

    with self.argument_context('dataprotection backup-policy delete') as c:
        c.argument('vault_name', type=str, help='The name of the backup vault.', id_part='name')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('backup_policy_name', options_list=['--name', '-n', '--backup-policy-name'], type=str, help='',
                   id_part='child_name_1')

    with self.argument_context('dataprotection backup-instance list') as c:
        c.argument('vault_name', type=str, help='The name of the backup vault.')
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('dataprotection backup-instance show') as c:
        c.argument('vault_name', type=str, help='The name of the backup vault.', id_part='name')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('backup_instance_name', options_list=['--name', '-n', '--backup-instance-name'], type=str,
                   help='The name of the backup instance', id_part='child_name_1')

    with self.argument_context('dataprotection backup-instance create') as c:
        c.argument('vault_name', type=str, help='The name of the backup vault.')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('backup_instance_name', options_list=['--name', '-n', '--backup-instance-name'], type=str,
                   help='The name of the backup instance')
        c.argument('friendly_name', type=str, help='Gets or sets the Backup Instance friendly name.')
        c.argument('data_source_info', action=AddDataSourceInfo, nargs='+', help='Gets or sets the data source '
                   'information.')
        c.argument('data_source_set_info', action=AddDataSourceSetInfo, nargs='+', help='Gets or sets the data source '
                   'set information.')
        c.argument('object_type', type=str, help='')
        c.argument('policy_id', type=str, help='', arg_group='Policy Info')
        c.argument('policy_parameters', action=AddPolicyParameters, nargs='+', help='Policy parameters for the backup '
                   'instance', arg_group='Policy Info')

    with self.argument_context('dataprotection backup-instance update') as c:
        c.argument('vault_name', type=str, help='The name of the backup vault.', id_part='name')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('backup_instance_name', options_list=['--name', '-n', '--backup-instance-name'], type=str,
                   help='The name of the backup instance', id_part='child_name_1')
        c.argument('friendly_name', type=str, help='Gets or sets the Backup Instance friendly name.')
        c.argument('data_source_info', action=AddDataSourceInfo, nargs='+', help='Gets or sets the data source '
                   'information.')
        c.argument('data_source_set_info', action=AddDataSourceSetInfo, nargs='+', help='Gets or sets the data source '
                   'set information.')
        c.argument('object_type', type=str, help='')
        c.argument('policy_id', type=str, help='', arg_group='Policy Info')
        c.argument('policy_parameters', action=AddPolicyParameters, nargs='+', help='Policy parameters for the backup '
                   'instance', arg_group='Policy Info')
        c.ignore('parameters')

    with self.argument_context('dataprotection backup-instance delete') as c:
        c.argument('vault_name', type=str, help='The name of the backup vault.', id_part='name')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('backup_instance_name', options_list=['--name', '-n', '--backup-instance-name'], type=str,
                   help='The name of the backup instance', id_part='child_name_1')

    with self.argument_context('dataprotection backup-instance adhoc-backup') as c:
        c.argument('vault_name', type=str, help='The name of the backup vault.', id_part='name')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('backup_instance_name', options_list=['--name', '-n', '--backup-instance-name'], type=str,
                   help='The name of the backup instance', id_part='child_name_1')
        c.argument('rule_name', type=str, help='', arg_group='Backup Rule Options')
        c.argument('retention_tag_override', type=str, help='', arg_group='Backup Rule Options Trigger Option')

    with self.argument_context('dataprotection backup-instance azure-backup-recovery-point-based-restore-request item-level-restore-target-info trigger-restore') as c:
        c.argument('vault_name', type=str, help='The name of the backup vault.', id_part='name')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('backup_instance_name', options_list=['--name', '-n', '--backup-instance-name'], type=str,
                   help='The name of the backup instance', id_part='child_name_1')
        c.argument('item_level_restore_target_info_restore_location', type=str, help='Target Restore region')
        c.argument('item_level_restore_target_info_restore_criteria',
                   action=AddItemLevelRestoreTargetInfoRestoreCriteria, nargs='+', help='Restore Criteria')
        c.argument('item_level_restore_target_info_datasource_info', action=AddDataSourceInfo, nargs='+',
                   help='Information of target DS')
        c.argument('item_level_restore_target_info_datasource_set_info', action=AddDataSourceSetInfo, nargs='+',
                   help='Information of target DS Set')
        c.argument('azurebackuprecoverypointbasedrestorerequest_source_data_store_type', arg_type=get_enum_type([
                                                                                                                 'ArchiveStore',
                                                                                                                 'SnapshotStore',
                                                                                                                 'VaultStore'
                                                                                                                 ]),
                   help='Gets or sets the type of the source data store.')
        c.argument('azurebackuprecoverypointbasedrestorerequest_recovery_point_id', type=str, help='')

    with self.argument_context('dataprotection backup-instance azure-backup-recovery-point-based-restore-request restore-files-target-info trigger-restore') as c:
        c.argument('vault_name', type=str, help='The name of the backup vault.', id_part='name')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('backup_instance_name', options_list=['--name', '-n', '--backup-instance-name'], type=str,
                   help='The name of the backup instance', id_part='child_name_1')
        c.argument('restore_files_target_info_restore_location', type=str, help='Target Restore region')
        c.argument('restore_files_target_info_target_details', action=AddRestoreFilesTargetInfoTargetDetails,
                   nargs='+', help='Destination of RestoreAsFiles operation, when destination is not a datasource')
        c.argument('azurebackuprecoverypointbasedrestorerequest_source_data_store_type', arg_type=get_enum_type([
                                                                                                                 'ArchiveStore',
                                                                                                                 'SnapshotStore',
                                                                                                                 'VaultStore'
                                                                                                                 ]),
                   help='Gets or sets the type of the source data store.')
        c.argument('azurebackuprecoverypointbasedrestorerequest_recovery_point_id', type=str, help='')

    with self.argument_context('dataprotection backup-instance azure-backup-recovery-point-based-restore-request restore-target-info trigger-restore') as c:
        c.argument('vault_name', type=str, help='The name of the backup vault.', id_part='name')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('backup_instance_name', options_list=['--name', '-n', '--backup-instance-name'], type=str,
                   help='The name of the backup instance', id_part='child_name_1')
        c.argument('restore_target_info_restore_location', type=str, help='Target Restore region')
        c.argument('restore_target_info_datasource_info', action=AddDataSourceInfo, nargs='+', help='Information of '
                   'target DS')
        c.argument('restore_target_info_datasource_set_info', action=AddDataSourceSetInfo, nargs='+',
                   help='Information of target DS Set')
        c.argument('azurebackuprecoverypointbasedrestorerequest_source_data_store_type', arg_type=get_enum_type([
                                                                                                                 'ArchiveStore',
                                                                                                                 'SnapshotStore',
                                                                                                                 'VaultStore'
                                                                                                                 ]),
                   help='Gets or sets the type of the source data store.')
        c.argument('azurebackuprecoverypointbasedrestorerequest_recovery_point_id', type=str, help='')

    with self.argument_context('dataprotection backup-instance azure-backup-recovery-time-based-restore-request item-level-restore-target-info trigger-restore') as c:
        c.argument('vault_name', type=str, help='The name of the backup vault.', id_part='name')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('backup_instance_name', options_list=['--name', '-n', '--backup-instance-name'], type=str,
                   help='The name of the backup instance', id_part='child_name_1')
        c.argument('item_level_restore_target_info_restore_location', type=str, help='Target Restore region')
        c.argument('item_level_restore_target_info_restore_criteria',
                   action=AddItemLevelRestoreTargetInfoRestoreCriteria, nargs='+', help='Restore Criteria')
        c.argument('item_level_restore_target_info_datasource_info', action=AddDataSourceInfo, nargs='+',
                   help='Information of target DS')
        c.argument('item_level_restore_target_info_datasource_set_info', action=AddDataSourceSetInfo, nargs='+',
                   help='Information of target DS Set')
        c.argument('azurebackuprecoverytimebasedrestorerequest_source_data_store_type', arg_type=get_enum_type([
                                                                                                                'ArchiveStore',
                                                                                                                'SnapshotStore',
                                                                                                                'VaultStore'
                                                                                                                ]),
                   help='Gets or sets the type of the source data store.')
        c.argument('azurebackuprecoverytimebasedrestorerequest_recovery_point_time', type=str, help='The recovery time '
                   'in ISO 8601 format example - 2020-08-14T17:30:00.0000000Z.')

    with self.argument_context('dataprotection backup-instance azure-backup-recovery-time-based-restore-request restore-files-target-info trigger-restore') as c:
        c.argument('vault_name', type=str, help='The name of the backup vault.', id_part='name')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('backup_instance_name', options_list=['--name', '-n', '--backup-instance-name'], type=str,
                   help='The name of the backup instance', id_part='child_name_1')
        c.argument('restore_files_target_info_restore_location', type=str, help='Target Restore region')
        c.argument('restore_files_target_info_target_details', action=AddRestoreFilesTargetInfoTargetDetails,
                   nargs='+', help='Destination of RestoreAsFiles operation, when destination is not a datasource')
        c.argument('azurebackuprecoverytimebasedrestorerequest_source_data_store_type', arg_type=get_enum_type([
                                                                                                                'ArchiveStore',
                                                                                                                'SnapshotStore',
                                                                                                                'VaultStore'
                                                                                                                ]),
                   help='Gets or sets the type of the source data store.')
        c.argument('azurebackuprecoverytimebasedrestorerequest_recovery_point_time', type=str, help='The recovery time '
                   'in ISO 8601 format example - 2020-08-14T17:30:00.0000000Z.')

    with self.argument_context('dataprotection backup-instance azure-backup-recovery-time-based-restore-request restore-target-info trigger-restore') as c:
        c.argument('vault_name', type=str, help='The name of the backup vault.', id_part='name')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('backup_instance_name', options_list=['--name', '-n', '--backup-instance-name'], type=str,
                   help='The name of the backup instance', id_part='child_name_1')
        c.argument('restore_target_info_restore_location', type=str, help='Target Restore region')
        c.argument('restore_target_info_datasource_info', action=AddDataSourceInfo, nargs='+', help='Information of '
                   'target DS')
        c.argument('restore_target_info_datasource_set_info', action=AddDataSourceSetInfo, nargs='+',
                   help='Information of target DS Set')
        c.argument('azurebackuprecoverytimebasedrestorerequest_source_data_store_type', arg_type=get_enum_type([
                                                                                                                'ArchiveStore',
                                                                                                                'SnapshotStore',
                                                                                                                'VaultStore'
                                                                                                                ]),
                   help='Gets or sets the type of the source data store.')
        c.argument('azurebackuprecoverytimebasedrestorerequest_recovery_point_time', type=str, help='The recovery time '
                   'in ISO 8601 format example - 2020-08-14T17:30:00.0000000Z.')

    with self.argument_context('dataprotection backup-instance azure-backup-restore-with-rehydration-request item-level-restore-target-info trigger-restore') as c:
        c.argument('vault_name', type=str, help='The name of the backup vault.', id_part='name')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('backup_instance_name', options_list=['--name', '-n', '--backup-instance-name'], type=str,
                   help='The name of the backup instance', id_part='child_name_1')
        c.argument('item_level_restore_target_info_restore_location', type=str, help='Target Restore region')
        c.argument('item_level_restore_target_info_restore_criteria',
                   action=AddItemLevelRestoreTargetInfoRestoreCriteria, nargs='+', help='Restore Criteria')
        c.argument('item_level_restore_target_info_datasource_info', action=AddDataSourceInfo, nargs='+',
                   help='Information of target DS')
        c.argument('item_level_restore_target_info_datasource_set_info', action=AddDataSourceSetInfo, nargs='+',
                   help='Information of target DS Set')
        c.argument('azurebackuprestorewithrehydrationrequest_source_data_store_type', arg_type=get_enum_type([
                                                                                                              'ArchiveStore',
                                                                                                              'SnapshotStore',
                                                                                                              'VaultStore'
                                                                                                              ]),
                   help='Gets or sets the type of the source data store.')
        c.argument('azurebackuprestorewithrehydrationrequest_recovery_point_id', type=str, help='')
        c.argument('azurebackuprestorewithrehydrationrequest_rehydration_priority', arg_type=get_enum_type(['Invalid',
                                                                                                            'High',
                                                                                                            'Standard']
                                                                                                            ),
                   help='Priority to be used for rehydration. Values High or Standard')
        c.argument('azurebackuprestorewithrehydrationrequest_rehydration_retention_duration', type=str,
                   help='Retention duration in ISO 8601 format i.e P10D .')

    with self.argument_context('dataprotection backup-instance azure-backup-restore-with-rehydration-request restore-files-target-info trigger-restore') as c:
        c.argument('vault_name', type=str, help='The name of the backup vault.', id_part='name')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('backup_instance_name', options_list=['--name', '-n', '--backup-instance-name'], type=str,
                   help='The name of the backup instance', id_part='child_name_1')
        c.argument('restore_files_target_info_restore_location', type=str, help='Target Restore region')
        c.argument('restore_files_target_info_target_details', action=AddRestoreFilesTargetInfoTargetDetails,
                   nargs='+', help='Destination of RestoreAsFiles operation, when destination is not a datasource')
        c.argument('azurebackuprestorewithrehydrationrequest_source_data_store_type', arg_type=get_enum_type([
                                                                                                              'ArchiveStore',
                                                                                                              'SnapshotStore',
                                                                                                              'VaultStore'
                                                                                                              ]),
                   help='Gets or sets the type of the source data store.')
        c.argument('azurebackuprestorewithrehydrationrequest_recovery_point_id', type=str, help='')
        c.argument('azurebackuprestorewithrehydrationrequest_rehydration_priority', arg_type=get_enum_type(['Invalid',
                                                                                                            'High',
                                                                                                            'Standard']
                                                                                                            ),
                   help='Priority to be used for rehydration. Values High or Standard')
        c.argument('azurebackuprestorewithrehydrationrequest_rehydration_retention_duration', type=str,
                   help='Retention duration in ISO 8601 format i.e P10D .')

    with self.argument_context('dataprotection backup-instance azure-backup-restore-with-rehydration-request restore-target-info trigger-restore') as c:
        c.argument('vault_name', type=str, help='The name of the backup vault.', id_part='name')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('backup_instance_name', options_list=['--name', '-n', '--backup-instance-name'], type=str,
                   help='The name of the backup instance', id_part='child_name_1')
        c.argument('restore_target_info_restore_location', type=str, help='Target Restore region')
        c.argument('restore_target_info_datasource_info', action=AddDataSourceInfo, nargs='+', help='Information of '
                   'target DS')
        c.argument('restore_target_info_datasource_set_info', action=AddDataSourceSetInfo, nargs='+',
                   help='Information of target DS Set')
        c.argument('azurebackuprestorewithrehydrationrequest_source_data_store_type', arg_type=get_enum_type([
                                                                                                              'ArchiveStore',
                                                                                                              'SnapshotStore',
                                                                                                              'VaultStore'
                                                                                                              ]),
                   help='Gets or sets the type of the source data store.')
        c.argument('azurebackuprestorewithrehydrationrequest_recovery_point_id', type=str, help='')
        c.argument('azurebackuprestorewithrehydrationrequest_rehydration_priority', arg_type=get_enum_type(['Invalid',
                                                                                                            'High',
                                                                                                            'Standard']
                                                                                                            ),
                   help='Priority to be used for rehydration. Values High or Standard')
        c.argument('azurebackuprestorewithrehydrationrequest_rehydration_retention_duration', type=str,
                   help='Retention duration in ISO 8601 format i.e P10D .')

    with self.argument_context('dataprotection backup-instance trigger-rehydrate') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('vault_name', type=str, help='The name of the backup vault.', id_part='name')
        c.argument('backup_instance_name', options_list=['--name', '-n', '--backup-instance-name'], type=str, help='',
                   id_part='child_name_1')
        c.argument('recovery_point_id', type=str, help='Id of the recovery point to be recovered')
        c.argument('rehydration_priority', arg_type=get_enum_type(['Invalid', 'High', 'Standard']), help='Priority to '
                   'be used for rehydration. Values High or Standard')
        c.argument('rehydration_retention_duration', type=str,
                   help='Retention duration in ISO 8601 format i.e P10D .')

    with self.argument_context('dataprotection backup-instance wait') as c:
        c.argument('vault_name', type=str, help='The name of the backup vault.', id_part='name')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('backup_instance_name', options_list=['--name', '-n', '--backup-instance-name'], type=str,
                   help='The name of the backup instance', id_part='child_name_1')

    with self.argument_context('dataprotection recovery-point show-list') as c:
        c.argument('vault_name', type=str, help='The name of the backup vault.', id_part='name')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('backup_instance_name', type=str, help='The name of the backup instance', id_part='child_name_1')
        c.argument('filter_', options_list=['--filter'], type=str, help='OData filter options.')
        c.argument('skip_token', type=str, help='skipToken Filter.')

    with self.argument_context('dataprotection recovery-point show') as c:
        c.argument('vault_name', type=str, help='The name of the backup vault.', id_part='name')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('backup_instance_name', type=str, help='The name of the backup instance', id_part='child_name_1')
        c.argument('recovery_point_id', type=str, help='', id_part='child_name_2')

    with self.argument_context('dataprotection job list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('vault_name', type=str, help='The name of the backup vault.')

    with self.argument_context('dataprotection job show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('vault_name', type=str, help='The name of the backup vault.', id_part='name')
        c.argument('job_id', type=str, help='The Job ID. This is a GUID-formatted string (e.g. '
                   '00000000-0000-0000-0000-000000000000).', id_part='child_name_1')
