# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=line-too-long
# pylint: disable=too-many-lines
# pylint: disable=unused-argument

from knack.util import CLIError
from azure.cli.core.util import sdk_no_wait


def dataprotection_backup_vault_show(client,
                                     vault_name,
                                     resource_group_name):
    return client.get(vault_name=vault_name,
                      resource_group_name=resource_group_name)


def dataprotection_backup_vault_create(client,
                                       vault_name,
                                       resource_group_name,
                                       storage_settings,
                                       e_tag=None,
                                       location=None,
                                       tags=None,
                                       type_=None,
                                       no_wait=False):
    parameters = {}
    parameters['e_tag'] = e_tag
    parameters['location'] = location
    parameters['tags'] = tags
    parameters['identity'] = {}
    parameters['identity']['type'] = type_
    parameters['storage_settings'] = storage_settings
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       vault_name=vault_name,
                       resource_group_name=resource_group_name,
                       parameters=parameters)


def dataprotection_backup_vault_update(instance,
                                       vault_name,
                                       resource_group_name,
                                       storage_settings,
                                       e_tag=None,
                                       location=None,
                                       tags=None,
                                       type_=None,
                                       no_wait=False):
    if e_tag is not None:
        instance.e_tag = e_tag
    if location is not None:
        instance.location = location
    if tags is not None:
        instance.tags = tags
    if type_ is not None:
        instance.identity.type = type_
    if storage_settings is not None:
        instance.storage_settings = storage_settings
    return instance


def dataprotection_backup_vault_delete(client,
                                       vault_name,
                                       resource_group_name):
    return client.delete(vault_name=vault_name,
                         resource_group_name=resource_group_name)


def dataprotection_backup_vault_patch(client,
                                      vault_name,
                                      resource_group_name,
                                      tags=None,
                                      type_=None,
                                      no_wait=False):
    parameters = {}
    parameters['tags'] = tags
    parameters['identity'] = {}
    parameters['identity']['type'] = type_
    return sdk_no_wait(no_wait,
                       client.begin_patch,
                       vault_name=vault_name,
                       resource_group_name=resource_group_name,
                       parameters=parameters)


def dataprotection_backup_vault_show_resource_in_resource_group(client,
                                                                resource_group_name):
    return client.get_resources_in_resource_group(resource_group_name=resource_group_name)


def dataprotection_backup_vault_show_resource_in_subscription(client):
    return client.get_resources_in_subscription()


def dataprotection_check_feature_support(client,
                                         location,
                                         feature_validation_request=None):
    all_parameters = []
    if feature_validation_request is not None:
        all_parameters.append(feature_validation_request)
    if len(all_parameters) > 1:
        raise CLIError('at most one of  feature_validation_request is needed for parameters!')
    if len(all_parameters) != 1:
        raise CLIError('parameters is required. but none of feature_validation_request is provided!')
    parameters = all_parameters[0] if len(all_parameters) == 1 else None
    return client.check_feature_support(location=location,
                                        parameters=parameters)


def dataprotection_show_operation_result_patch(client,
                                               vault_name,
                                               resource_group_name,
                                               operation_id):
    return client.get_operation_result_patch(vault_name=vault_name,
                                             resource_group_name=resource_group_name,
                                             operation_id=operation_id)


def dataprotection_show_operation_status(client,
                                         location,
                                         operation_id):
    return client.get_operation_status(location=location,
                                       operation_id=operation_id)


def dataprotection_backup_policy_list(client,
                                      vault_name,
                                      resource_group_name):
    return client.list(vault_name=vault_name,
                       resource_group_name=resource_group_name)


def dataprotection_backup_policy_show(client,
                                      vault_name,
                                      resource_group_name,
                                      backup_policy_name):
    return client.get(vault_name=vault_name,
                      resource_group_name=resource_group_name,
                      backup_policy_name=backup_policy_name)


def dataprotection_backup_policy_create(client,
                                        vault_name,
                                        resource_group_name,
                                        backup_policy_name,
                                        datasource_types=None):
    parameters = {}
    parameters['datasource_types'] = datasource_types
    return client.create_or_update(vault_name=vault_name,
                                   resource_group_name=resource_group_name,
                                   backup_policy_name=backup_policy_name,
                                   parameters=parameters)


def dataprotection_backup_policy_update(instance,
                                        vault_name,
                                        resource_group_name,
                                        backup_policy_name,
                                        datasource_types=None):
    if datasource_types is not None:
        instance.datasource_types = datasource_types
    return instance


def dataprotection_backup_policy_delete(client,
                                        vault_name,
                                        resource_group_name,
                                        backup_policy_name):
    return client.delete(vault_name=vault_name,
                         resource_group_name=resource_group_name,
                         backup_policy_name=backup_policy_name)


def dataprotection_backup_instance_list(client,
                                        vault_name,
                                        resource_group_name):
    return client.list(vault_name=vault_name,
                       resource_group_name=resource_group_name)


def dataprotection_backup_instance_show(client,
                                        vault_name,
                                        resource_group_name,
                                        backup_instance_name):
    return client.get(vault_name=vault_name,
                      resource_group_name=resource_group_name,
                      backup_instance_name=backup_instance_name)


def dataprotection_backup_instance_create(client,
                                          vault_name,
                                          resource_group_name,
                                          backup_instance_name,
                                          friendly_name=None,
                                          data_source_info=None,
                                          data_source_set_info=None,
                                          object_type=None,
                                          policy_id=None,
                                          policy_parameters=None,
                                          no_wait=False):
    parameters = {}
    parameters['friendly_name'] = friendly_name
    parameters['data_source_info'] = data_source_info
    parameters['data_source_set_info'] = data_source_set_info
    parameters['object_type'] = object_type
    parameters['policy_info'] = {}
    parameters['policy_info']['policy_id'] = policy_id
    parameters['policy_info']['policy_parameters'] = policy_parameters
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       vault_name=vault_name,
                       resource_group_name=resource_group_name,
                       backup_instance_name=backup_instance_name,
                       parameters=parameters)


def dataprotection_backup_instance_update(instance,
                                          vault_name,
                                          resource_group_name,
                                          backup_instance_name,
                                          friendly_name=None,
                                          data_source_info=None,
                                          data_source_set_info=None,
                                          object_type=None,
                                          policy_id=None,
                                          policy_parameters=None,
                                          no_wait=False):
    if friendly_name is not None:
        instance.friendly_name = friendly_name
    if data_source_info is not None:
        instance.data_source_info = data_source_info
    if data_source_set_info is not None:
        instance.data_source_set_info = data_source_set_info
    if object_type is not None:
        instance.object_type = object_type
    if policy_id is not None:
        instance.policy_info.policy_id = policy_id
    if policy_parameters is not None:
        instance.policy_info.policy_parameters = policy_parameters
    return instance


def dataprotection_backup_instance_delete(client,
                                          vault_name,
                                          resource_group_name,
                                          backup_instance_name,
                                          no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       vault_name=vault_name,
                       resource_group_name=resource_group_name,
                       backup_instance_name=backup_instance_name)


def dataprotection_backup_instance_adhoc_backup(client,
                                                vault_name,
                                                resource_group_name,
                                                backup_instance_name,
                                                rule_name,
                                                retention_tag_override=None,
                                                no_wait=False):
    parameters = {}
    parameters['backup_rule_options'] = {}
    parameters['backup_rule_options']['rule_name'] = rule_name
    parameters['backup_rule_options']['trigger_option'] = {}
    parameters['backup_rule_options']['trigger_option']['retention_tag_override'] = retention_tag_override
    return sdk_no_wait(no_wait,
                       client.begin_adhoc_backup,
                       vault_name=vault_name,
                       resource_group_name=resource_group_name,
                       backup_instance_name=backup_instance_name,
                       parameters=parameters)


def dataprotection_backup_instance_azure_backup_recovery_point_based_restore_request_item_level_restore_target_info_trigger_restore(client,
                                                                                                                                    vault_name,
                                                                                                                                    resource_group_name,
                                                                                                                                    backup_instance_name,
                                                                                                                                    item_level_restore_target_info_restore_criteria,
                                                                                                                                    item_level_restore_target_info_datasource_info,
                                                                                                                                    azurebackuprecoverypointbasedrestorerequest_source_data_store_type,
                                                                                                                                    azurebackuprecoverypointbasedrestorerequest_recovery_point_id,
                                                                                                                                    item_level_restore_target_info_restore_location=None,
                                                                                                                                    item_level_restore_target_info_datasource_set_info=None,
                                                                                                                                    no_wait=False):
    parameters = {}
    parameters['object_type'] = 'AzureBackupRecoveryPointBasedRestoreRequest'
    parameters['azure_backup_recovery_point_based_restore_request_restore_target_info'] = {}
    parameters['azure_backup_recovery_point_based_restore_request_restore_target_info']['object_type'] = 'ItemLevelRestoreTargetInfo'
    parameters['azure_backup_recovery_point_based_restore_request_restore_target_info']['recovery_option'] = "FailIfExists"
    parameters['azure_backup_recovery_point_based_restore_request_restore_target_info']['restore_location'] = item_level_restore_target_info_restore_location
    parameters['azure_backup_recovery_point_based_restore_request_restore_target_info']['restore_criteria'] = item_level_restore_target_info_restore_criteria
    parameters['azure_backup_recovery_point_based_restore_request_restore_target_info']['datasource_info'] = item_level_restore_target_info_datasource_info
    parameters['azure_backup_recovery_point_based_restore_request_restore_target_info']['datasource_set_info'] = item_level_restore_target_info_datasource_set_info
    parameters['recovery_point_id'] = azurebackuprecoverypointbasedrestorerequest_recovery_point_id
    return sdk_no_wait(no_wait,
                       client.begin_trigger_restore,
                       vault_name=vault_name,
                       resource_group_name=resource_group_name,
                       backup_instance_name=backup_instance_name,
                       parameters=parameters)


def dataprotection_backup_instance_azure_backup_recovery_point_based_restore_request_restore_files_target_info_trigger_restore(client,
                                                                                                                               vault_name,
                                                                                                                               resource_group_name,
                                                                                                                               backup_instance_name,
                                                                                                                               restore_files_target_info_target_details,
                                                                                                                               azurebackuprecoverypointbasedrestorerequest_source_data_store_type,
                                                                                                                               azurebackuprecoverypointbasedrestorerequest_recovery_point_id,
                                                                                                                               restore_files_target_info_restore_location=None,
                                                                                                                               no_wait=False):
    parameters = {}
    parameters['object_type'] = 'AzureBackupRecoveryPointBasedRestoreRequest'
    parameters['azure_backup_recovery_point_based_restore_request_restore_target_info'] = {}
    parameters['azure_backup_recovery_point_based_restore_request_restore_target_info']['object_type'] = 'RestoreFilesTargetInfo'
    parameters['azure_backup_recovery_point_based_restore_request_restore_target_info']['recovery_option'] = "FailIfExists"
    parameters['azure_backup_recovery_point_based_restore_request_restore_target_info']['restore_location'] = restore_files_target_info_restore_location
    parameters['azure_backup_recovery_point_based_restore_request_restore_target_info']['target_details'] = restore_files_target_info_target_details
    parameters['recovery_point_id'] = azurebackuprecoverypointbasedrestorerequest_recovery_point_id
    return sdk_no_wait(no_wait,
                       client.begin_trigger_restore,
                       vault_name=vault_name,
                       resource_group_name=resource_group_name,
                       backup_instance_name=backup_instance_name,
                       parameters=parameters)


def dataprotection_backup_instance_azure_backup_recovery_point_based_restore_request_restore_target_info_trigger_restore(client,
                                                                                                                         vault_name,
                                                                                                                         resource_group_name,
                                                                                                                         backup_instance_name,
                                                                                                                         restore_target_info_datasource_info,
                                                                                                                         azurebackuprecoverypointbasedrestorerequest_source_data_store_type,
                                                                                                                         azurebackuprecoverypointbasedrestorerequest_recovery_point_id,
                                                                                                                         restore_target_info_restore_location=None,
                                                                                                                         restore_target_info_datasource_set_info=None,
                                                                                                                         no_wait=False):
    parameters = {}
    parameters['object_type'] = 'AzureBackupRecoveryPointBasedRestoreRequest'
    parameters['azure_backup_recovery_point_based_restore_request_restore_target_info'] = {}
    parameters['azure_backup_recovery_point_based_restore_request_restore_target_info']['object_type'] = 'RestoreTargetInfo'
    parameters['azure_backup_recovery_point_based_restore_request_restore_target_info']['recovery_option'] = "FailIfExists"
    parameters['azure_backup_recovery_point_based_restore_request_restore_target_info']['restore_location'] = restore_target_info_restore_location
    parameters['azure_backup_recovery_point_based_restore_request_restore_target_info']['datasource_info'] = restore_target_info_datasource_info
    parameters['azure_backup_recovery_point_based_restore_request_restore_target_info']['datasource_set_info'] = restore_target_info_datasource_set_info
    parameters['recovery_point_id'] = azurebackuprecoverypointbasedrestorerequest_recovery_point_id
    return sdk_no_wait(no_wait,
                       client.begin_trigger_restore,
                       vault_name=vault_name,
                       resource_group_name=resource_group_name,
                       backup_instance_name=backup_instance_name,
                       parameters=parameters)


def dataprotection_backup_instance_azure_backup_recovery_time_based_restore_request_item_level_restore_target_info_trigger_restore(client,
                                                                                                                                   vault_name,
                                                                                                                                   resource_group_name,
                                                                                                                                   backup_instance_name,
                                                                                                                                   item_level_restore_target_info_restore_criteria,
                                                                                                                                   item_level_restore_target_info_datasource_info,
                                                                                                                                   azurebackuprecoverytimebasedrestorerequest_source_data_store_type,
                                                                                                                                   azurebackuprecoverytimebasedrestorerequest_recovery_point_time,
                                                                                                                                   item_level_restore_target_info_restore_location=None,
                                                                                                                                   item_level_restore_target_info_datasource_set_info=None,
                                                                                                                                   no_wait=False):
    parameters = {}
    parameters['object_type'] = 'AzureBackupRecoveryTimeBasedRestoreRequest'
    parameters['azure_backup_recovery_time_based_restore_request_restore_target_info'] = {}
    parameters['azure_backup_recovery_time_based_restore_request_restore_target_info']['object_type'] = 'ItemLevelRestoreTargetInfo'
    parameters['azure_backup_recovery_time_based_restore_request_restore_target_info']['recovery_option'] = "FailIfExists"
    parameters['azure_backup_recovery_time_based_restore_request_restore_target_info']['restore_location'] = item_level_restore_target_info_restore_location
    parameters['azure_backup_recovery_time_based_restore_request_restore_target_info']['restore_criteria'] = item_level_restore_target_info_restore_criteria
    parameters['azure_backup_recovery_time_based_restore_request_restore_target_info']['datasource_info'] = item_level_restore_target_info_datasource_info
    parameters['azure_backup_recovery_time_based_restore_request_restore_target_info']['datasource_set_info'] = item_level_restore_target_info_datasource_set_info
    parameters['recovery_point_time'] = azurebackuprecoverytimebasedrestorerequest_recovery_point_time
    return sdk_no_wait(no_wait,
                       client.begin_trigger_restore,
                       vault_name=vault_name,
                       resource_group_name=resource_group_name,
                       backup_instance_name=backup_instance_name,
                       parameters=parameters)


def dataprotection_backup_instance_azure_backup_recovery_time_based_restore_request_restore_files_target_info_trigger_restore(client,
                                                                                                                              vault_name,
                                                                                                                              resource_group_name,
                                                                                                                              backup_instance_name,
                                                                                                                              restore_files_target_info_target_details,
                                                                                                                              azurebackuprecoverytimebasedrestorerequest_source_data_store_type,
                                                                                                                              azurebackuprecoverytimebasedrestorerequest_recovery_point_time,
                                                                                                                              restore_files_target_info_restore_location=None,
                                                                                                                              no_wait=False):
    parameters = {}
    parameters['object_type'] = 'AzureBackupRecoveryTimeBasedRestoreRequest'
    parameters['azure_backup_recovery_time_based_restore_request_restore_target_info'] = {}
    parameters['azure_backup_recovery_time_based_restore_request_restore_target_info']['object_type'] = 'RestoreFilesTargetInfo'
    parameters['azure_backup_recovery_time_based_restore_request_restore_target_info']['recovery_option'] = "FailIfExists"
    parameters['azure_backup_recovery_time_based_restore_request_restore_target_info']['restore_location'] = restore_files_target_info_restore_location
    parameters['azure_backup_recovery_time_based_restore_request_restore_target_info']['target_details'] = restore_files_target_info_target_details
    parameters['recovery_point_time'] = azurebackuprecoverytimebasedrestorerequest_recovery_point_time
    return sdk_no_wait(no_wait,
                       client.begin_trigger_restore,
                       vault_name=vault_name,
                       resource_group_name=resource_group_name,
                       backup_instance_name=backup_instance_name,
                       parameters=parameters)


def dataprotection_backup_instance_azure_backup_recovery_time_based_restore_request_restore_target_info_trigger_restore(client,
                                                                                                                        vault_name,
                                                                                                                        resource_group_name,
                                                                                                                        backup_instance_name,
                                                                                                                        restore_target_info_datasource_info,
                                                                                                                        azurebackuprecoverytimebasedrestorerequest_source_data_store_type,
                                                                                                                        azurebackuprecoverytimebasedrestorerequest_recovery_point_time,
                                                                                                                        restore_target_info_restore_location=None,
                                                                                                                        restore_target_info_datasource_set_info=None,
                                                                                                                        no_wait=False):
    parameters = {}
    parameters['object_type'] = 'AzureBackupRecoveryTimeBasedRestoreRequest'
    parameters['azure_backup_recovery_time_based_restore_request_restore_target_info'] = {}
    parameters['azure_backup_recovery_time_based_restore_request_restore_target_info']['object_type'] = 'RestoreTargetInfo'
    parameters['azure_backup_recovery_time_based_restore_request_restore_target_info']['recovery_option'] = "FailIfExists"
    parameters['azure_backup_recovery_time_based_restore_request_restore_target_info']['restore_location'] = restore_target_info_restore_location
    parameters['azure_backup_recovery_time_based_restore_request_restore_target_info']['datasource_info'] = restore_target_info_datasource_info
    parameters['azure_backup_recovery_time_based_restore_request_restore_target_info']['datasource_set_info'] = restore_target_info_datasource_set_info
    parameters['recovery_point_time'] = azurebackuprecoverytimebasedrestorerequest_recovery_point_time
    return sdk_no_wait(no_wait,
                       client.begin_trigger_restore,
                       vault_name=vault_name,
                       resource_group_name=resource_group_name,
                       backup_instance_name=backup_instance_name,
                       parameters=parameters)


def dataprotection_backup_instance_azure_backup_restore_with_rehydration_request_item_level_restore_target_info_trigger_restore(client,
                                                                                                                                vault_name,
                                                                                                                                resource_group_name,
                                                                                                                                backup_instance_name,
                                                                                                                                item_level_restore_target_info_restore_criteria,
                                                                                                                                item_level_restore_target_info_datasource_info,
                                                                                                                                azurebackuprestorewithrehydrationrequest_source_data_store_type,
                                                                                                                                azurebackuprestorewithrehydrationrequest_recovery_point_id,
                                                                                                                                azurebackuprestorewithrehydrationrequest_rehydration_priority,
                                                                                                                                azurebackuprestorewithrehydrationrequest_rehydration_retention_duration,
                                                                                                                                item_level_restore_target_info_restore_location=None,
                                                                                                                                item_level_restore_target_info_datasource_set_info=None,
                                                                                                                                no_wait=False):
    parameters = {}
    parameters['object_type'] = 'AzureBackupRestoreWithRehydrationRequest'
    parameters['azure_backup_restore_with_rehydration_request_restore_target_info'] = {}
    parameters['azure_backup_restore_with_rehydration_request_restore_target_info']['object_type'] = 'ItemLevelRestoreTargetInfo'
    parameters['azure_backup_restore_with_rehydration_request_restore_target_info']['recovery_option'] = "FailIfExists"
    parameters['azure_backup_restore_with_rehydration_request_restore_target_info']['restore_location'] = item_level_restore_target_info_restore_location
    parameters['azure_backup_restore_with_rehydration_request_restore_target_info']['restore_criteria'] = item_level_restore_target_info_restore_criteria
    parameters['azure_backup_restore_with_rehydration_request_restore_target_info']['datasource_info'] = item_level_restore_target_info_datasource_info
    parameters['azure_backup_restore_with_rehydration_request_restore_target_info']['datasource_set_info'] = item_level_restore_target_info_datasource_set_info
    parameters['recovery_point_id'] = azurebackuprestorewithrehydrationrequest_recovery_point_id
    parameters['rehydration_priority'] = azurebackuprestorewithrehydrationrequest_rehydration_priority
    parameters['rehydration_retention_duration'] = azurebackuprestorewithrehydrationrequest_rehydration_retention_duration
    return sdk_no_wait(no_wait,
                       client.begin_trigger_restore,
                       vault_name=vault_name,
                       resource_group_name=resource_group_name,
                       backup_instance_name=backup_instance_name,
                       parameters=parameters)


def dataprotection_backup_instance_azure_backup_restore_with_rehydration_request_restore_files_target_info_trigger_restore(client,
                                                                                                                           vault_name,
                                                                                                                           resource_group_name,
                                                                                                                           backup_instance_name,
                                                                                                                           restore_files_target_info_target_details,
                                                                                                                           azurebackuprestorewithrehydrationrequest_source_data_store_type,
                                                                                                                           azurebackuprestorewithrehydrationrequest_recovery_point_id,
                                                                                                                           azurebackuprestorewithrehydrationrequest_rehydration_priority,
                                                                                                                           azurebackuprestorewithrehydrationrequest_rehydration_retention_duration,
                                                                                                                           restore_files_target_info_restore_location=None,
                                                                                                                           no_wait=False):
    parameters = {}
    parameters['object_type'] = 'AzureBackupRestoreWithRehydrationRequest'
    parameters['azure_backup_restore_with_rehydration_request_restore_target_info'] = {}
    parameters['azure_backup_restore_with_rehydration_request_restore_target_info']['object_type'] = 'RestoreFilesTargetInfo'
    parameters['azure_backup_restore_with_rehydration_request_restore_target_info']['recovery_option'] = "FailIfExists"
    parameters['azure_backup_restore_with_rehydration_request_restore_target_info']['restore_location'] = restore_files_target_info_restore_location
    parameters['azure_backup_restore_with_rehydration_request_restore_target_info']['target_details'] = restore_files_target_info_target_details
    parameters['recovery_point_id'] = azurebackuprestorewithrehydrationrequest_recovery_point_id
    parameters['rehydration_priority'] = azurebackuprestorewithrehydrationrequest_rehydration_priority
    parameters['rehydration_retention_duration'] = azurebackuprestorewithrehydrationrequest_rehydration_retention_duration
    return sdk_no_wait(no_wait,
                       client.begin_trigger_restore,
                       vault_name=vault_name,
                       resource_group_name=resource_group_name,
                       backup_instance_name=backup_instance_name,
                       parameters=parameters)


def dataprotection_backup_instance_azure_backup_restore_with_rehydration_request_restore_target_info_trigger_restore(client,
                                                                                                                     vault_name,
                                                                                                                     resource_group_name,
                                                                                                                     backup_instance_name,
                                                                                                                     restore_target_info_datasource_info,
                                                                                                                     azurebackuprestorewithrehydrationrequest_source_data_store_type,
                                                                                                                     azurebackuprestorewithrehydrationrequest_recovery_point_id,
                                                                                                                     azurebackuprestorewithrehydrationrequest_rehydration_priority,
                                                                                                                     azurebackuprestorewithrehydrationrequest_rehydration_retention_duration,
                                                                                                                     restore_target_info_restore_location=None,
                                                                                                                     restore_target_info_datasource_set_info=None,
                                                                                                                     no_wait=False):
    parameters = {}
    parameters['object_type'] = 'AzureBackupRestoreWithRehydrationRequest'
    parameters['azure_backup_restore_with_rehydration_request_restore_target_info'] = {}
    parameters['azure_backup_restore_with_rehydration_request_restore_target_info']['object_type'] = 'RestoreTargetInfo'
    parameters['azure_backup_restore_with_rehydration_request_restore_target_info']['recovery_option'] = "FailIfExists"
    parameters['azure_backup_restore_with_rehydration_request_restore_target_info']['restore_location'] = restore_target_info_restore_location
    parameters['azure_backup_restore_with_rehydration_request_restore_target_info']['datasource_info'] = restore_target_info_datasource_info
    parameters['azure_backup_restore_with_rehydration_request_restore_target_info']['datasource_set_info'] = restore_target_info_datasource_set_info
    parameters['recovery_point_id'] = azurebackuprestorewithrehydrationrequest_recovery_point_id
    parameters['rehydration_priority'] = azurebackuprestorewithrehydrationrequest_rehydration_priority
    parameters['rehydration_retention_duration'] = azurebackuprestorewithrehydrationrequest_rehydration_retention_duration
    return sdk_no_wait(no_wait,
                       client.begin_trigger_restore,
                       vault_name=vault_name,
                       resource_group_name=resource_group_name,
                       backup_instance_name=backup_instance_name,
                       parameters=parameters)


def dataprotection_backup_instance_trigger_rehydrate(client,
                                                     resource_group_name,
                                                     vault_name,
                                                     backup_instance_name,
                                                     recovery_point_id,
                                                     rehydration_retention_duration,
                                                     rehydration_priority=None,
                                                     no_wait=False):
    parameters = {}
    parameters['recovery_point_id'] = recovery_point_id
    parameters['rehydration_priority'] = rehydration_priority
    parameters['rehydration_retention_duration'] = rehydration_retention_duration
    return sdk_no_wait(no_wait,
                       client.begin_trigger_rehydrate,
                       resource_group_name=resource_group_name,
                       vault_name=vault_name,
                       backup_instance_name=backup_instance_name,
                       parameters=parameters)


def dataprotection_recovery_point_show_list(client,
                                            vault_name,
                                            resource_group_name,
                                            backup_instance_name,
                                            filter_=None,
                                            skip_token=None):
    return client.get_list(vault_name=vault_name,
                           resource_group_name=resource_group_name,
                           backup_instance_name=backup_instance_name,
                           filter=filter_,
                           skip_token=skip_token)


def dataprotection_recovery_point_show(client,
                                       vault_name,
                                       resource_group_name,
                                       backup_instance_name,
                                       recovery_point_id):
    return client.get(vault_name=vault_name,
                      resource_group_name=resource_group_name,
                      backup_instance_name=backup_instance_name,
                      recovery_point_id=recovery_point_id)


def dataprotection_job_list(client,
                            resource_group_name,
                            vault_name):
    return client.list(resource_group_name=resource_group_name,
                       vault_name=vault_name)


def dataprotection_job_show(client,
                            resource_group_name,
                            vault_name,
                            job_id):
    return client.get(resource_group_name=resource_group_name,
                      vault_name=vault_name,
                      job_id=job_id)
