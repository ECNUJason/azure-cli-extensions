# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------


# pylint: disable=protected-access

# pylint: disable=no-self-use


import argparse
from collections import defaultdict
from knack.util import CLIError


class AddStorageSettings(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddStorageSettings, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:

            kl = k.lower()

            v = properties[k]

            if kl == 'datastore-type':

                d['datastore_type'] = v[0]

            elif kl == 'type':

                d['type'] = v[0]

            else:
                raise CLIError(
                    'Unsupported Key {} is provided for parameter storage-settings. All possible keys are:'
                    ' datastore-type, type'.format(k)
                )

        return d


class AddFeatureValidationRequest(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.feature_validation_request = action

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:

            kl = k.lower()

            v = properties[k]

            if kl == 'feature-type':

                d['feature_type'] = v[0]

            elif kl == 'feature-name':

                d['feature_name'] = v[0]

            else:
                raise CLIError(
                    'Unsupported Key {} is provided for parameter feature-validation-request. All possible keys are:'
                    ' feature-type, feature-name'.format(k)
                )

        d['object_type'] = 'FeatureValidationRequest'

        return d


class AddDataSourceInfo(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.data_source_info = action

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:

            kl = k.lower()

            v = properties[k]

            if kl == 'datasource-type':

                d['datasource_type'] = v[0]

            elif kl == 'object-type':

                d['object_type'] = v[0]

            elif kl == 'resource-id':

                d['resource_id'] = v[0]

            elif kl == 'resource-location':

                d['resource_location'] = v[0]

            elif kl == 'resource-name':

                d['resource_name'] = v[0]

            elif kl == 'resource-type':

                d['resource_type'] = v[0]

            elif kl == 'resource-uri':

                d['resource_uri'] = v[0]

            else:
                raise CLIError(
                    'Unsupported Key {} is provided for parameter data-source-info. All possible keys are:'
                    ' datasource-type, object-type, resource-id, resource-location, resource-name, resource-type,'
                    ' resource-uri'.format(k)
                )

        return d


class AddDataSourceSetInfo(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.data_source_set_info = action

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:

            kl = k.lower()

            v = properties[k]

            if kl == 'datasource-type':

                d['datasource_type'] = v[0]

            elif kl == 'object-type':

                d['object_type'] = v[0]

            elif kl == 'resource-id':

                d['resource_id'] = v[0]

            elif kl == 'resource-location':

                d['resource_location'] = v[0]

            elif kl == 'resource-name':

                d['resource_name'] = v[0]

            elif kl == 'resource-type':

                d['resource_type'] = v[0]

            elif kl == 'resource-uri':

                d['resource_uri'] = v[0]

            else:
                raise CLIError(
                    'Unsupported Key {} is provided for parameter data-source-set-info. All possible keys are:'
                    ' datasource-type, object-type, resource-id, resource-location, resource-name, resource-type,'
                    ' resource-uri'.format(k)
                )

        return d


class AddPolicyParameters(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.policy_parameters = action

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:

            kl = k.lower()

            v = properties[k]

            if kl == 'data-store-parameters-list':

                d['data_store_parameters_list'] = v

            else:
                raise CLIError(
                    'Unsupported Key {} is provided for parameter policy-parameters. All possible keys are:'
                    ' data-store-parameters-list'.format(k)
                )

        return d


class AddItemLevelRestoreTargetInfoRestoreCriteria(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddItemLevelRestoreTargetInfoRestoreCriteria, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:

            kl = k.lower()

            v = properties[k]

            if kl == 'object-type':

                d['object_type'] = v[0]

            else:
                raise CLIError(
                    'Unsupported Key {} is provided for parameter item-level-restore-target-info_restore-criteria. All'
                    ' possible keys are: object-type'.format(k)
                )

        return d


class AddRestoreFilesTargetInfoTargetDetails(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.restore_files_target_info_target_details = action

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:

            kl = k.lower()

            v = properties[k]

            if kl == 'file-prefix':

                d['file_prefix'] = v[0]

            elif kl == 'restore-target-location-type':

                d['restore_target_location_type'] = v[0]

            elif kl == 'url':

                d['url'] = v[0]

            else:
                raise CLIError(
                    'Unsupported Key {} is provided for parameter restore-files-target-info_target-details. All'
                    ' possible keys are: file-prefix, restore-target-location-type, url'.format(k)
                )

        return d
